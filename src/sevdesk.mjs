import axios from "axios";

/**
 * Make a call to the sevDesk API
 *
 * @param {string} path
 * @param {string} apiToken
 * @param {object} config
 * @returns
 */
const makeApiCall = (path, apiToken, config = {}) => {
  return axios.get(`https://my.sevdesk.de/api/v1/${path}`, {
    headers: {
      Authorization: apiToken,
      ...(config.headers || {}),
    },
    ...config,
  });
};

/**
 * Returns all vouchers in a specific payDate-range
 *
 * @param {Date} startDate
 * @param {Date} endDate
 * @param {string} apiToken
 * @returns {Array} Voucher objects as defined in sevDesk API
 */
const getVouchers = async (startDate, endDate, apiToken) => {
  try {
    const result = await makeApiCall("Voucher", apiToken, {
      params: {
        startPayDate: startDate.getTime() / 1000,
        endPayDate: endDate.getTime() / 1000,
      },
    });

    return result.data.objects;
  } catch (err) {
    throw new Error(err.message);
  }
};

/**
 * Downloads all the passed vouchers as PDF + meta data for storage
 * Does NOT store the files
 *
 * @param {Array} vouchers from API / @see getVouchers
 * @returns {Array} for each voucher: PDF Buffer Data and meta data (payDate, supplierName, documentId)
 */
const downloadVouchers = async (vouchers, apiToken) => {
  let voucherDocuments = [];
  try {
    const promises = vouchers.map((voucher) => {
      return downloadVoucher(voucher, apiToken);
    });
    voucherDocuments = await Promise.all(promises);
  } catch (err) {
    throw err;
  }
  return voucherDocuments.filter((vd) => vd); // filter out null values - values without a document attached
};

/**
 * Private. Downloads a single voucher
 * @see downloadVouchers
 *
 * @param {Object} voucher (@see getVouchers)
 * @returns {Object} PDF Buffer Data and meta data (payDate, supplierName, documentId)
 */
const downloadVoucher = async (voucher, apiToken) => {
  try {
    const result = await makeApiCall(
      `Voucher/${voucher.id}/downloadDocument`,
      apiToken
    );
    const document = result.data.objects;
    if (!document) {
      // values without a document attached - eg transaction costs automatically generated by sevDesk - ignore them
      return null;
    }
    let content = document.content;
    if (document.base64Encoded) {
      content = Buffer.from(content, "base64");
    }
    return {
      document: content,
      payDate: voucher.payDate ? new Date(voucher.payDate) : null,
      name: voucher.supplierName || voucher.supplierNameAtSave || "",
      id: voucher.id,
    };
  } catch (err) {
    return null;
  }
};

export { getVouchers, downloadVouchers };
